import os
import pickle
import itertools
import networkx as nx
import configparser

MOAC = 0

discipline_to_idx = {"Math": 0, "Algebra": 1, "Arithmetics": 2, "AbstractAlgebra": 3, "LinearAlgebra": 4,

                     "BinaryArithmetic": 5, "ComputerArithmetic": 6}

'''
# Example of the metric list for 4 groups: 

metrics_list = [
(3, [695928, 695955, 699130, 1028589, 632685, 634240, 990454, 839900, 976097, 976100, 1639294, 256737, 97848, 45199, 1028158, 672190, 293450, 15109, 1166245, 279715, 7193, 52119, 1938461, 56353, 294358, 705249, 1681010, 3832917, 287808, 458709, 106364, 5755338, 5755288, 6497746, 7738360, 7869974, 696289, 23799, 18102, 769434, 316081, 102221, 11153189, 12154411, 13933682, 1734292, 17590530, 888073, 20247295, 20932195, 4062502, 173844, 2047965, 22783408, 693994, 3434402, 2702836, 23087655, 17327394, 101863, 24971513, 211566, 19616384, 352181, 14826, 330095, 342453, 60012, 3588331, 244373, 302202, 5558285, 3875683, 2219011, 186291, 42301, 23931341, 29957562, 333835, 2161429, 8887, 188725, 33222076, 6085, 1335, 8398, 34233472, 145661, 24575820, 695968, 20103544, 20555200, 992922, 4190449, 113564, 771700, 34243559, 3171371, 15845764, 37520883, 37580589, 293802, 38557859, 3864201, 1160, 17094227, 37848137, 15845985, 11000264, 4178225, 2084687, 103118, 42285227, 5042667, 42993804, 23110101, 449477, 832212, 286172, 12929412, 46458425, 46783690, 46630707, 32533, 50718738, 50490527, 3852079, 186050, 294390, 52405825, 53022621, 3070669, 10603, 53920738, 5259526, 14962, 55001159, 2297929, 1460235, 56067604, 509788, 212980, 7819462, 14972, 228312, 51441, 58713633, 58753466, 229940, 3126358, 609125, 52773150, 60921299, 1531404]),
(5, [468313, 58992, 705249, 23552839, 53734, 23552864, 23552810, 457830, 307145, 149922, 11310261, 9436252, 194467, 21088783, 2832170, 40725, 1068955, 17133530, 31689303, 291683, 4533924, 80754, 249992, 145555, 1617661, 314425, 4337178, 3349272, 33011281, 26348996, 26348917, 31837848, 18584624, 4036694, 6459360, 26322871, 7207827, 20865950, 22330, 1893663, 376948, 503472, 40695, 2174079, 39521086, 3336479, 7639504, 264399, 30670886, 29779638, 46716834, 49311039, 49311074, 49342088, 49342148, 49342216, 49342344, 49342347, 49342349, 49342351, 49342354, 49355949, 3364, 52360425, 52299655, 650189, 38838, 55974779, 2266631, 3821, 91147, 405039, 4254987, 586702, 3365, 57499027, 238686, 57911772, 57911773, 57911775, 57914732, 57914734, 57914735, 57914736, 57914737, 57914830, 57914833, 57914834, 57914836, 57914837, 13263, 9552145, 50564]),
(6, [1312946, 989287, 1349666, 2050276, 2084574, 53734, 3076863, 1609200, 1830167, 600892, 376757, 10237, 4181062, 5334646, 5503176, 4252320, 314425, 7843159, 8712675, 9496834, 4252869, 10784136, 358754, 12045930, 1498076, 37096, 13885985, 12076692, 18692018, 305290, 20865950, 9828, 11589424, 23552864, 23558705, 23558700, 23558692, 23700338, 459453, 457812, 1917276, 5503348, 653780, 4180990, 1069091, 7186253, 1068955, 6156939, 26322871, 26597035, 26812527, 9636455, 28430974, 1629687, 2832170, 3686118, 449736, 141163, 373216, 394099, 31837848, 3253502, 31689303, 34511514, 3821, 29196163, 586694, 8453671, 405039, 14794, 2176160, 483126, 1042902, 38133621, 2810996, 15189, 39293339, 405028, 39521086, 537969, 3336479, 5623373, 40012017, 30537795, 1254615, 44362997, 419250, 904378, 1301302, 11376, 44390320, 47701231, 41226, 859590, 7822306, 426856, 49356702, 632224, 1352428, 36095073, 50676680, 50676697, 50677472, 50682711, 52360425, 41828, 2151421, 49244, 54623478, 2907387, 40724, 48662, 169945, 56334866, 47151741, 62950, 56621861, 27046146, 238686, 48435335, 57865301, 32940598, 47084882, 8313563, 19592412, 32130416, 2811731, 185663, 61244004, 61453666]),
(4, [201611, 194743, 1504581, 1028589, 229528, 1087818, 125276, 1470767, 898784, 149968, 1442505, 622844, 462005, 214137, 772566, 195982, 292852, 97848, 372620, 1543735, 1451250, 1028158, 1140043, 954323, 166356, 1750541, 2045451, 1029137, 860138, 2147961, 243316, 2468892, 2608829, 56353, 519182, 879358, 293432, 202840, 3710751, 2383040, 3681279, 123495, 5168898, 5302952, 1213177, 475035, 6652599, 6890644, 7058352, 7133473, 7136985, 50909, 5957084, 7252030, 1046155, 6466838, 99862, 7872813, 1127460, 692453, 1770656, 8721698, 217548, 5896724, 1453977, 1955708, 3675281, 5361510, 18102, 10160606, 3050954, 10775818, 102221, 236007, 11269780, 11380117, 12643654, 13005617, 13341540, 430493, 13548016, 13757276, 14076693, 525149, 4786593, 799405, 1734292, 14568414, 14674709, 14824044, 4566542, 15663283, 144823, 5045759, 15932036, 2470414, 16437548, 3443011, 3837790, 585826, 5957182, 10465001, 18676962, 1191490, 19358248, 19575563, 55632, 17545909, 20405001, 20506374, 173844, 2047965, 312877, 21861125, 113564, 22256304, 2864495, 23452012, 23629444, 814148, 1177768, 893559, 101863, 20598932, 4542, 215889, 22634860, 82361, 24918060, 7903048, 45240, 990534, 4504771, 13525027, 25140222, 25125936, 24920134, 25264725, 25292663, 1772303, 5582812, 25426649, 4636611, 1497463, 1182982, 1182975, 390646, 306343, 506713, 1058833, 195063, 3588331, 244373, 302202, 25150322, 25826595, 23039174, 23970675, 25568464, 1734238, 27437771, 56357, 2368531, 42169, 1283725, 28846642, 43270, 15890311, 9025098, 167053, 4908214, 1708097, 755400, 7079248, 7988, 5583245, 20749642, 10950869, 38267, 58899, 251478, 5277589, 30994663, 11403316, 217122, 298834, 1028233, 31575765, 26569158, 27567102, 26561, 13835110, 1699416, 1391942, 33503735, 3558266, 2161429, 18420, 9822856, 1179451, 34063376, 18422, 821959, 20437320, 7455889, 34245443, 2975155, 1765852, 1382381, 37580589, 157093, 15581094, 38405915, 1508507, 38447249, 38128, 2556798, 11578785, 7999138, 17006296, 1824845, 39653582, 39654522, 762954, 39747050, 1033865, 39799215, 32781954, 30373123, 30328290, 40862848, 40956141, 41167140, 41121490, 41331720, 113087, 41392084, 32364992, 1007903, 41604289, 41618845, 8240558, 41833604, 10159868, 1442470, 578478, 203052, 15175696, 43608216, 43825969, 449477, 832212, 166008, 45256442, 8468, 45486934, 41513013, 46706590, 46953393, 46955123, 20412, 11231812, 142207, 6793014, 47331006, 218268, 1137612, 47459238, 40205956, 5897031, 47047358, 48706354, 48803892, 44844703, 49594059, 49598229, 49690041, 32533, 49468975, 49664155, 313741, 27701374, 157092, 978650, 52815653, 52991874, 9697, 53022621, 53547112, 54109664, 1072915, 340630, 79099, 509788, 57481237, 353855, 58325116, 14953761, 8947106, 58753466, 59047031, 53941, 8641870, 61109403])
]

pickle.dump(metrics_list, open('metric_list.pkl', 'wb'))
'''



'''
Example of the dictionary representation for a small category tree:

labels_dict = {(0, 0): (0, 0, 0), (0, 1): (0, 1, 0), (0, 2): (0, 1, 0), (0, 3): (0, 2, 0), (0, 4): (0, 2, 0),
               (0, 5): (0, 2, 0), (0, 6): (0, 2, 0), (1, 0): (0, 1, 0), (1, 1): (0, 0, 1), (1, 2): (1, 1, 0),
               (1, 3): (0, 1, 1), (1, 4): (0, 1, 1), (1, 5): (1, 2, 0), (1, 6): (1, 2, 0), (2, 0): (1, 0, 0),
               (2, 1): (1, 1, 0), (2, 2): (0, 0, 1), (2, 3): (1, 2, 0), (2, 4): (1, 2, 0), (2, 5): (0, 1, 1),
               (2, 6): (0, 1, 1), (3, 0): (2, 0, 0), (3, 1): (1, 0, 1), (3, 2): (2, 1, 0), (3, 3): (0, 0, 2),
               (3, 4): (1, 1, 1), (3, 5): (2, 2, 0), (3, 6): (2, 2, 0), (4, 0): (2, 0, 0), (4, 1): (1, 0, 1),
               (4, 2): (2, 1, 0), (4, 3): (1, 1, 1), (4, 4): (0, 0, 2), (4, 5): (2, 2, 0), (4, 6): (2, 2, 0),
               (5, 0): (2, 0, 0), (5, 1): (2, 1, 0), (5, 2): (1, 0, 1), (5, 3): (2, 2, 0), (5, 4): (2, 2, 0),
               (5, 5): (0, 0, 2), (5, 6): (1, 1, 1), (6, 0): (2, 0, 0), (6, 1): (2, 1, 0), (6, 2): (1, 0, 1),
               (6, 3): (2, 2, 0), (6, 4): (2, 2, 0), (6, 5): (1, 1, 1), (6, 6): (0, 0, 2)}

'''

Tree = nx.DiGraph()
# Tree.add_edges_from([(0, 1), (0, 2), (1, 3), (1, 4), (2, 5), (2, 6)])
with open('Tree.pkl', 'rb') as t:
    Tree = pickle.load(t)

labels_dict = {}
for element in itertools.product(Tree.nodes, Tree.nodes):
    lowest_common = nx.lowest_common_ancestor(Tree, element[0], element[1])
    dist_first_from_LC = len(nx.shortest_path(Tree, lowest_common, element[0])) - 1
    dist_sec_from_LC = len(nx.shortest_path(Tree, lowest_common, element[1])) - 1
    dist_from_MOAC = len(nx.shortest_path(Tree, MOAC, lowest_common)) - 1
    labels_dict[(element[0], element[1])] = dist_first_from_LC, dist_sec_from_LC, dist_from_MOAC
    labels_dict[(element[1], element[0])] = dist_sec_from_LC, dist_first_from_LC, dist_from_MOAC

pickle.dump(labels_dict, open(os.path.join('small_graph', "labels.pkl"), 'wb'))


config = configparser.ConfigParser()
config.read('conf.ini')

